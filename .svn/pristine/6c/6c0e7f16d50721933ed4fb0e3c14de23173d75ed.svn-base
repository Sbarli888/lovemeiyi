package com.hust.iprai;

import java.io.File;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import android.content.Context;
import android.os.Handler;
import android.os.Message;
import android.util.Log;

public class MyDownloader {
    
    private static final String TAG = MyDownloader.class.getSimpleName();

    private String mUrl; // 下载的URL地址

    private String mSavePath; // 文件的保存路径

    private int mThreadCount; // 下载一个文件使用的线程数

    private int fileSize; // 所要下载的文件大小

    private Handler mHandler;

    private DBManager mDao;

    private List<DownloadInfo> mInfos;

    // 下载的状态
    private static final int INIT = 1;

    private static final int DOWNLOADING = 2;

    private static final int PAUSE = 3;

    private int mState = INIT;

    public MyDownloader(Context context, String url, String savePath,
            int threadCount, Handler handler) {
        mDao = new DBManager(context);
        mUrl = url;
        mSavePath = savePath;
        mThreadCount = threadCount;
        mHandler = handler;
    }

    /**
     * 是否正在下载
     * 
     * @return
     */
    public boolean isDownloading() {
        return mState == DOWNLOADING;
    }

    /**
     * 得到downloader里的信息 首先进行判断是否是第一次下载，如果是第一次就要进行初始化，并将下载器的信息保存到数据库中
     * 如果不是第一次下载，那就要从数据库中读出之前下载的信息（起始位置，结束为止，文件大小等），并将下载信息返回给下载器
     */
    public LoadInfo getDownloaderInfos() {
        if (isFirst(mUrl)) {
            init();
            int range = fileSize / mThreadCount;
            mInfos = new ArrayList<DownloadInfo>();
            for (int i = 0; i < mThreadCount - 1; i++) {
                DownloadInfo info = new DownloadInfo(i, i * range, (i + 1)
                        * range - 1, 0, fileSize, mUrl);
                mInfos.add(info);
            }
            DownloadInfo info = new DownloadInfo(mThreadCount - 1,
                    (mThreadCount - 1) * range, fileSize - 1, 0, fileSize, mUrl);
            mInfos.add(info);
            // 保存infos中的数据到数据库
            mDao.saveInfos(mInfos);
            // 创建一个LoadInfo对象记载下载器的具体信息
            LoadInfo loadInfo = new LoadInfo(fileSize, 0, mUrl);
            return loadInfo;
        } else {
            // 得到数据库中已有的urlstr的下载器的具体信息
            mInfos = mDao.getInfos(mUrl);
            Log.v("TAG", "not isFirst size=" + mInfos.size());
            int compeleteSize = 0;
            for (DownloadInfo info : mInfos) {
                compeleteSize += info.mCompleteSize;
            }
            // 从数据库中读取文件大小
            fileSize = mInfos.get(0).mFileSize;
            Log.i(TAG, "completeSize=" + compeleteSize);
            Log.i(TAG, "fileSize=" + fileSize);
            return new LoadInfo(fileSize, compeleteSize, mUrl);
        }
    }

    /**
     * 初始化
     */
    private void init() {
        try {
            URL url = new URL(mUrl);
            HttpURLConnection connection = (HttpURLConnection) url
                    .openConnection();
            connection.setConnectTimeout(5000);
            connection.setRequestMethod("GET");
            fileSize = connection.getContentLength();
            
            
            
            File file = new File(mSavePath);
            if (!file.exists()) {
                file.createNewFile();
            }
            // 本地访问文件
            RandomAccessFile accessFile = new RandomAccessFile(file, "rwd");
            accessFile.setLength(fileSize);
            accessFile.close();
            connection.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 判断是否是第一次 下载
     */
    private boolean isFirst(String url) {
        return mDao.hasRecord(url);
    }

    /**
     * 利用线程开始下载数据
     */
    public void download() {
        if (mInfos != null) {
            if (mState == DOWNLOADING)
                return;
            mState = DOWNLOADING;
            for (DownloadInfo info : mInfos) {
                new MyThread(info.mThreadId, info.mStartPos, info.mEndPos,
                        info.mCompleteSize, info.mUrl).start();
            }
        }
    }

    public class MyThread extends Thread {

        private int threadId;

        private int startPos;

        private int endPos;

        private int compeleteSize;

        private String urlstr;

        public MyThread(int threadId, int startPos, int endPos,
                int compeleteSize, String urlstr) {
            this.threadId = threadId;
            this.startPos = startPos;
            this.endPos = endPos;
            this.compeleteSize = compeleteSize;
            this.urlstr = urlstr;
        }

        @Override
        public void run() {
            HttpURLConnection connection = null;
            RandomAccessFile randomAccessFile = null;
            InputStream is = null;
            try {
                URL url = new URL(urlstr);
                connection = (HttpURLConnection) url.openConnection();
                connection.setConnectTimeout(5000);
                connection.setRequestMethod("GET");
                // 设置范围，格式为Range：bytes x-y;
                connection.setRequestProperty("Range", "bytes="
                        + (startPos + compeleteSize) + "-" + endPos);

                randomAccessFile = new RandomAccessFile(mSavePath, "rwd");
                randomAccessFile.seek(startPos + compeleteSize);
                // 将要下载的文件写到保存在保存路径下的文件中
                is = connection.getInputStream();
                byte[] buffer = new byte[4096];
                int length = -1;
                while ((length = is.read(buffer)) != -1) {
                    randomAccessFile.write(buffer, 0, length);
                    compeleteSize += length;
                    // 更新数据库中的下载信息
                    mDao.updateInfos(threadId, compeleteSize, urlstr);
                    // 用消息将下载信息传给进度条，对进度条进行更新
                    Message message = Message.obtain();
                    message.what = 1;
                    message.obj = urlstr;
                    message.arg1 = length;
                    mHandler.sendMessage(message);
                    if (mState == PAUSE) {
                        return;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    if (is != null) {
                        is.close();
                    }

                    if (randomAccessFile != null) {
                        randomAccessFile.close();
                    }

                    if (connection != null) {
                        connection.disconnect();
                    }

                    if (mDao != null) {
                        mDao.closeDb();
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        }
    }

    // 删除数据库中urlstr对应的下载器信息
    public void delete(String url) {
        mDao.delete(url);
    }

    // 设置暂停
    public void pause() {
        mState = PAUSE;
    }

    // 重置下载状态
    public void reset() {
        mState = INIT;
    }
    
    public List<DownloadInfo> getDownloadInfos() {
        return mInfos;
    }

}
