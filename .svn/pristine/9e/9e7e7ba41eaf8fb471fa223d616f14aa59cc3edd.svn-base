package com.hust.iprai;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import android.app.ListActivity;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ProgressBar;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends ListActivity {
    
    private static final String TAG = MainActivity.class.getSimpleName();
    
    // 固定下载的资源路径，这里可以设置网络上的地址
    private static final String DOWNLOAD_URL = "http://www.bazhua.igexin.com/download/contents/app/";

    // 固定存放下载的音乐的路径：SD卡目录下
    private static final String SD_PATH = "/mnt/sdcard/MyDownloader";

    // 存放各个下载器
    private Map<String, MyDownloader> downloaders = new HashMap<String, MyDownloader>();

    // 存放与下载器对应的进度条
    private Map<String, ProgressBar> ProgressBars = new HashMap<String, ProgressBar>();
    
    private DBManager mDbManager = null;

    /**
     * 利用消息处理机制适时更新进度条
     */
    private Handler mHandler = new Handler() {
        public void handleMessage(Message msg) {
            if (msg.what == 1) {
                String url = (String) msg.obj;
                int length = msg.arg1;
                ProgressBar bar = ProgressBars.get(url);
                if (bar != null) {
                    // 设置进度条按读取的length长度更新
                    bar.incrementProgressBy(length);
                    if (bar.getProgress() == bar.getMax()) {
                        Toast.makeText(MainActivity.this, "下载完成！", 0).show();
                        // 下载完成后清除进度条并将map中的数据清空
                        LinearLayout layout = (LinearLayout) bar.getParent();
                        layout.removeView(bar);
                        ProgressBars.remove(url);
                        downloaders.get(url).delete(url);
                        downloaders.get(url).reset();
                        downloaders.remove(url);

                    }
                }
            }
        }
    };

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        showListView();
        mDbManager = new DBManager(this);
    }

    // 显示listView，这里可以随便添加音乐
    private void showListView() {
        List<Map<String, String>> data = new ArrayList<Map<String, String>>();
        Map<String, String> map = new HashMap<String, String>();
        map.put("name", "Bazhua_Android.apk");
        data.add(map);
        map = new HashMap<String, String>();
        map.put("name", "weibo_sdk_source_code_20120322.zip");
        data.add(map);
        map = new HashMap<String, String>();
        map.put("name", "tt.mp3");
        data.add(map);
        map = new HashMap<String, String>();
        map.put("name", "You.mp3");
        data.add(map);
        SimpleAdapter adapter = new SimpleAdapter(this, data,
                R.layout.list_item, new String[] { "name" },
                new int[] { R.id.tv_resouce_name });
        setListAdapter(adapter);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        mDbManager.closeDb();
    }

    /**
     * 响应开始下载按钮的点击事件
     */
    public void startDownload(final View v) {
        // 得到textView的内容
        LinearLayout layout = (LinearLayout) v.getParent();
        String musicName = ((TextView) layout
                .findViewById(R.id.tv_resouce_name)).getText().toString();
        final String urlstr = DOWNLOAD_URL + musicName;
        String localfile = SD_PATH + musicName;
        // 设置下载线程数为4，这里是我为了方便随便固定的
        int threadcount = 4;
        // 初始化一个downloader下载器
        MyDownloader downloader = downloaders.get(urlstr);
        if (downloader == null) {
            downloader = new MyDownloader(this, urlstr, localfile, threadcount,
                    mHandler);
            downloaders.put(urlstr, downloader);
        }
        if (downloader.isDownloading())
            return;
        final MyDownloader tmpDownloader = downloader;

        // 网络操作应该放在子线程中
        new Thread(new Runnable() {

            public void run() {
                // 得到下载信息类的个数组成集合
                final LoadInfo loadInfo = tmpDownloader.getDownloaderInfos();

                mHandler.post(new Runnable() {

                    // UI操作post到主线程中
                    public void run() {
                        // 显示进度条
                        showProgress(loadInfo, urlstr, v);
                    }

                });

                // 调用方法开始下载
                tmpDownloader.download();
            }

        }).start();

    }

    @Override
    protected void onPause() {
        super.onPause();
        Log.i(TAG, "onPause");
        Collection<MyDownloader> downloaderSet = downloaders.values();
        Iterator<MyDownloader> it = downloaderSet.iterator();
        while(it.hasNext()) {
            MyDownloader loader = it.next();
            List<DownloadInfo> infos = loader.getDownloadInfos();
            Iterator<DownloadInfo> it2 = infos.iterator();
            while(it2.hasNext()) {
                DownloadInfo info = it2.next();
                mDbManager.updateInfos(info.mThreadId, info.mCompleteSize, info.mUrl);
            }
           
        }
    }

    @Override
    protected void onStop() {
        super.onStop();
    }

    /**
     * 显示进度条
     */
    private void showProgress(LoadInfo loadInfo, String url, View v) {
        ProgressBar bar = ProgressBars.get(url);
        if (bar == null) {
            bar = new ProgressBar(this, null,
                    android.R.attr.progressBarStyleHorizontal);
            bar.setMax(loadInfo.mFileSize);
            bar.setProgress(loadInfo.mCompleteSize);
            ProgressBars.put(url, bar);
            LinearLayout.LayoutParams params = new LayoutParams(
                    LayoutParams.FILL_PARENT, 5);
            ((LinearLayout) ((LinearLayout) v.getParent()).getParent())
                    .addView(bar, params);
        }
    }

    /**
     * 响应暂停下载按钮的点击事件
     */
    public void pauseDownload(View v) {
        LinearLayout layout = (LinearLayout) v.getParent();
        String musicName = ((TextView) layout
                .findViewById(R.id.tv_resouce_name)).getText().toString();
        String urlstr = DOWNLOAD_URL + musicName;
        if (downloaders.get(urlstr) != null) {
            downloaders.get(urlstr).pause();
        }
        
    }
}
















